<!DOCTYPE HTML>
<html>
    <head>
        <meta charset="utf-8">
        <link rel = "stylesheet" type="text/css" href="shared/tma1_stylesheet.css">
        <script type="text/javascript" src="tma1.js"></script>
        <script type="text/javascript">
            window.onload = function () {
                pageStartup();
            }
        </script>
        <title>TMA1 - Main Page</title>
    </head>
    <body>
        <div class="linksBar">
            <h1 class="banner">COMP 469 - Assignment 1</h1>                                                
            <ul>
                <li>
                    <a href="part1/WelcomeToResume.html">Resume</a>
                </li>
                <li>
                    <a href="part2/WelcomeToLearnTheWeb.html">Learn The Web</a>
                </li>
                <li>
                    <a href="part3/WelcomeToPhotoSlideshow.html">Photo Slideshow</a>
                </li>
                <li>
                    <a href="part4/WelcomeToUtilityTools.html">Utility Tools</a>
                </li>
            </ul>
        </div>

        <div class="aside mainScreen">
            <button id="defaultOpen" class="active tablinks">Assignment #1</button>
            <button class="tablinks">Resume Documentation</button>
            <button class="tablinks">Learn The Web Documentation</button>
            <button class="tablinks">Photo Slideshow Documentation</button>
            <button class="tablinks">Utility Tools Documentation</button>
            <button class="tablinks">Notes to the Tutor</button>
        </div>

        <div class="main-content mainScreen">
            <div class="titleDiv">
                <span class="title1">Assignment #1 (TMA1)</span>
                <span class="title2">COMP 466 - Advanced Technologies for Web-Based Systems</span>
                <span class="title3">Daniel Tran - 3339325</span>
                <span class="title3">Start Date: July 5, 2017</span>
                <span class="title3">End Date: October 13, 2017</span>
                <span class="title3">Estimated Hours: 60 hours</span>
            </div>
            <div class="titleDiv" hidden>
                <span class="title1">Resume Documentation</span>
                <span class="title2">Original Description and Requirements (Part 1 - 15 marks)</span>
                <p class="title4">
                    Create an XML version of your resume containing at least three sections: 
                    general information about you; your educational background, and your work experience. 
                    Create a schema for the XML document, and then create an XSLT for the XML document so 
                    that it can be rendered in a browser.
                </p>
                <p class="title4">
                    Save all three files (resume.xml, resume.XSD, and resume.xsl) for Part 1 in the 
                    directory TMA1/part1.
                </p>
                
                <hr />
                
                <span class="title2">Interpretation of Description and Requirements</span>
                <p class="title4">
                    My interpretation for the resume documentation assignment was to understand the basics of
                    how to create an XML file, with the appropriate headers and properly named XML tags. Using
                    this structured XML document, an XSD file is also important to accomodate the XML file
                    in order to create a structure for the document. This way, an XSL file can be made to
                    display the XML information in an HTML format. I believe a resume was chosen because a
                    resume has a rigid structure that is followed, similar to an XML document, so it can be
                    easily modeled in XML. I understand the question as asking me to create an XML file containing
                    the information from my resume, having an XSD file to verify the structure of the XML file,
                    and an XSLT file to render the XML document in the browser.
                </p>

                <hr />

                <span class="title2">Analysis and Design of the Web Application</span>
                <p class="title4">
                    The order of progression in developing this portion of the web application was first
                    creating an XML file. It is important to look at a resume before trying to create the XML file,
                    in order to create a more structured XML file that better models the resume structure.This XML 
                    file should contain tags that separate the XML file into different sections that match
                    the different sections of the resume. There should be headers for each of the sections, with the
                    possibility of subsections (such as the workplace name and job position under a work experience
                    section). There should also be sections within the XMl file, under the headers, which contain
                    section specific information. Since the structure of the XML file is of a recursive nature, the
                    XSLT file should operate recursively to display the information in the XML file.
                </p>

                <hr />

                <span class="title2">Documentation of Implementation</span>                
                <p class="title4">
                    In my implementation of the Resume Web Application, the XML document consists of all sections
                    of the resume within the &lt;myResume&gt; XML tags. Each section of the resume (ex. General Information,
                    Educational Background, etc.) are seperated by &lt;section&gt; tags. Each section must contain a 
                    &lt;sectionHeader&gt; tag, which displays the name of the section. Next, there is a 
                    &lt;sectionInformation&gt; tag which contains all of the information for the section. It can contain 
                    &lt;workplaceName&gt; tags (within the workexperience header) to denote a specific workplace name, 
                    along with a &lt;workPosition&gt; tag for the accomodating position at the company. There are 
                    &lt;detail&gt; tags as well, which provide information for all of the sectionInformation sections. 
                    In the case of my resume, the only other titles that existed were subtitles for the workplace, which 
                    is why the sections for "workplacename" and "workPosition" exist in the XML structure. The structure 
                    of the XML is defined in the XSD file. The section is defined to have a minimum of three occurances, which
                    matches the specification of the resume "containing at least three sections". The section has a type
                    of resume:sectionDetails. There are also unlimited number of sections that can be created, allowing for
                    a more flexible design for resumes. Next, there is the sectionDetails type, which contains a sectionHeader
                    element and a sectionInformation element. The sectionHeader element can only appear once, while the
                    sectionInformation element can appear multiple times. This is because each section should only have one
                    header, but can have multiple sections of information (such as in Work Experience). Finally, there is the
                    sectionInfo type, which contains a workplacaeName element, workPosition element, and a details element. The
                    workplaceName and workPosition elements show up once per sectionInformation section, and can show up either
                    0 or 1 times. They are designed to be implemented in the Work Experience section, and other sections of the\
                    resume may not have these workplaceName/workPosition elements, so they are optional. The details element can
                    occur as many times as wanted, but must appear at least once per sectionInformation. The format of the types is:
                </p>
                <pre class="title4">
                    resumeType
                        section : sectionDetails
                    sectionDetails
                        sectionHeader : string
                        sectionInformation : sectionInfo
                    sectionInfo
                        workplaceName : string
                        workPosition : string
                        details : string
                </pre>
                <p class="title4">
                    Finally, after having the XML and XSD files created, the XSLT file is needed to be able to render the XML file
                    in a browser. The XSLT file works recursively bit first matching the each section in the resume. In the section,
                    it takes the sectionHeader and converts the information between the tag into an &lt;h1&gt; element, then
                    it looks through the &lt;sectionInformation&gt; tag. In here, we see if there is a workplaceName tag
                    by using an xsl:if statement on the string. If there is, it renders the &lt;workplaceName&gt; tag as &lt;h2&gt;
                    element. It does the same thing with the &lt;workPosition&gt; tag, but creates an &lt;h3&gt; element. Next, it
                    recurses through the &lt;details&gt; tag and displays all of the information in this tag as list elements.
                </p>

                <hr />

                <span class="title2">Setup, Run, and Use Guide</span>
                <p class="title4">
                    The setup required for this application requires that the resume.xml, resume.xsd, and resume.xsl files exist in
                    the part1 folder. To check the XML file with the XSD file, include the line
                    &lt;resume:myResume xmlns:resume=&quot;http://www.resume.com&quot;&gt; at the top of the resume.xml file. To
                    render the XML file to a browser, include the 
                    &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;resume.xsl&quot;?&gt; statement at the top of the
                    resume.xml file. Ensure that only one of these are present at the top of the resume.xml file at any one point,
                    and not both at the same time.
                </p>

                <hr />

                <span class="title2">Resources</span>
                <p class="title4">
                    Some of the resources used are not documented here (due to being unable to find them anymore), but the ones 
                    that were found are listed below:
                </p>
                <ul class="title4">
                    <li>
                        <a href="https://stackoverflow.com/questions/36730769/nesting-multiple-xslt-templates-with-recursion">
                            Recursive XML reading in XSLT
                        </a>
                    </li>
                    <li>
                        <a href="http://www.utilities-online.info/xsdvalidation/#.Wd2GNltSxQK">
                            XML and XSD Validator
                        </a>
                    </li>
                </ul>
            </div>
            <div class="titleDiv" hidden>
                <span class="title1">Learn The Web Documentation</span>
                <span class="title2">Original Description and Requirements (Part 2 - 30 marks)</span>
                <p class="title4">
                    Using the web technologies you have learned so far, including HTML5, CSS3, JavaScript, 
                    XML and Ajax, write a web application, that can help people to learn the technologies 
                    covered in Unit 1, Unit 2, or Unit 3 of the course. The requirements are detailed as follows:
                </p>
                <ol class="title4">
                    <li>It must be a web-based system with a name you choose, a banner to show off your work, 
                        navigation menus and buttons. It should begin with a welcome page to greet the users, 
                        to explain what the application does, and what they get from it, and how they should proceed.
                    </li>
                    <li>
                        The application must have three pages of tutorials, accessible through navigation menus or 
                        buttons, to teach the technologies covered in Unit 1, Unit 2 and Unit 3 respectively. You don't 
                        need to teach everything, but there should be enough content to make each of the tutorials useful.
                    </li>
                    <li>
                        There should be a quiz for each tutorial, which can be accessed right after the tutorial page, 
                        as well as through the navigation menus and buttons of the system.
                    </li>
                    <li>
                        After the submission button is hit, the quiz system should be able to grade the answers the 
                        learner has provided, show the correct answers as well as the score in percentage.
                    </li>
                    <li>
                        The quiz system should be designed so that questions can be easily edited, added, 
                        or deleted, and new quiz can be easily created.
                    </li>
                    <li>
                        You should do your best to use the web technologies covered in Unit 1, unit 2 and Unit 3, 
                        including HTML5, CSS3, JavaScript, XML and Ajax.
                    </li>
                    <li>
                        Your web application should use or teach at least five page-structure elements and six new input types
                    </li>
                    <li>
                        You should use an external style sheet for all pages of the system, to retain a consistent and 
                        user-friendly interface for your system.
                    </li>
                    <li>
                        When using HTML5 table, be sure that you only use it to display tabular information, not to lay out the 
                        elements on your page.
                    </li>
                </ol>
                <p class="title4">
                    You must pay attention to both the functionalities and user interface. Save Part 2 files in the directory TMA1/part2.
                </p>
                
                <hr />
                
                <span class="title2">Interpretation of Description and Requirements</span>
                <p class="title4">
                    My interpretation of the requirements is that a web application is created to teach 
                    users about the basics of the technologies discussed in Units 1 through 3, using the
                    knowledge gained from these units (HTML, CSS, JavaScript, XML, and Ajax). I understand the
                    "banner to show off your work" as a bar on the webpage that will show the rest of the
                    applications in the network of web applications, including this web application. As well,
                    the banner should contain buttons or some sort of access to different sections of the tutorial 
                    information, as well as the quizzes. The welcome page to greet the users just displays what the
                    web application is about, and leads the user to the tutorials web application. Next, it looks
                    like what is expected from the application is that there are different sections that cover 
                    different units in the text, where there are at least 3 tutorials, covering some of the material
                    from Units 1, 2, and 3. As well, there should be a minimum of five page-structured elements and
                    six input types. These should be taught in the tutorials. As well, each tutorial should have a
                    quiz at the end of the quiz. The quiz should also be accessible on through navigation buttons,
                    so the same quiz should be accessible through either the end of the quiz or through the 
                    navigation menu. As well, the quiz system should be able to output the number of correct answers,
                    as well as the percentage correct. It doesn't talk about things such as showing the correct answer
                    and incorrect answer if the user selected the wrong answer, or randomizing the questions or
                    multiple choice questions, although these are definitely good enhancements for the future. Finally,
                    the quiz system should be created so questions could be easily added, removed, or edited, which
                    tells me that they want the place containing the information of the questions/answers to be
                    separate from the code. As well, all of the styling should be external for ease of CSS reuse and
                    having a consistent UI.
                </p>

                <hr />

                <span class="title2">Analysis and Design of the Web Application</span>
                <p class="title4">
                    The analysis of this web application is that the code should be able to display different sections
                    of information for different units. The &quot;banner&quot; will be split into two sections, where
                    one banner that spans the top of the page will provide links to the other applications in the network.
                    There will be a vertical section of the banner that spans the left side of the screen, which will
                    display navigation buttons related to the specific web application. In this case, the web application
                    is Learn The Web. Thus, there will be buttons on the side banner to navigate to different
                    units and to access different quizzes. The welcome page of the application will be the page that is
                    accessed first whenever a user tries to navigate to the Learn The Web application. This page will
                    contain some general information about the application including the purpose and what the users should 
                    be getting out of the application. This web page allow the users to access the application, which will 
                    be done using a button. Since there are tutorial sections and quiz sections, and that the quizzes should 
                    be accessible through the quizzes, then the same quiz should be accessed through a button on the navigation 
                    menu and from the bottom of the quiz. The button at the bottom of the quiz should link to the same spot 
                    as the navigation button. As well, it seems that the quiz system should be easily modified, which seems 
                    most easily done through containing all of the tutorial information and quiz information in XML. The different 
                    units will be contained in XML tags, which will then be converted into the appropriate HTML elements through 
                    the use of JavaScript. This is designed to make both the tutorials and quizzes easy to modify.
                </p>

                <hr />

                <span class="title2">Documentation of Implementation</span>                
                <p class="title4">
                    For the implementation, the top banner was implemented as a div containing an unordered list, where the 
                    aesthetics was modified through an external CSS stylesheet. The list contains links (&lt;a&gt; tags) 
                    containing a reference to the other web applications. The side navigation menu and buttons are contained 
                    in a div, taking up 20% of the screen. First, the XML data is read from a file, which is structured for 
                    tutorial data as follows: 
                </p>
                <ul class="title4">
                    <li>&lt;units&gt; tag contains all of the other tags and information.</li>
                    <li>
                        &lt;tutorial name=&quot;&quot;&gt; tag contains a single unit, where the &quot;name&quot; attribute is the name of 
                        the name of the button on the navigation menu.
                    </li>
                    <li>
                        &lt;section title=&quot;&quot;&gt; tag contains multiple subsectionssections for the tutorial. The &quot;title&quot; 
                        attribute is displayed at the top of the each tutorial unit and quiz as a &lt;h1&gt; element.
                    </li>
                    <li>
                        &lt;subsection title=&quot;&quot;&gt; tag is contained within a section tag and contains a subsection 
                        of the unit, such as a particular part of the unit. The &quot;title&quot; attribute contains the name of the subsection 
                        as a &lt;h2&gt; element.
                    </li>
                    <li>
                        &lt;paragraph&gt; tag is contained within a subsection tag, where multiple paragraph tags can appear within 
                        one subsection text information or html elements that will be displayed in a &lt;p&gt; paragraph element in HTML.
                    </li>
                    <li>
                        &lt;image src=&quot;&quot;&gt; tag is used to render an image in HTML. The &quot;src&quot; attribute is used to provide the  
                        path to the image file, and the text within the &lt;image&gt;&lt;/&gt; tags is the backup text if the image 
                        fails to render.
                    </li>
                </ul>
                <p class="title4">
                    For the quiz data, it follows a similar format, and is contained within the same XML file as the Tutorial data. 
                    The quiz information is also under the &lt;units&gt; tag. The rest of the tags are contained within it as follows:  
                </p>
                <ul class="title4">
                    <li>
                        &lt;quiz name=&quot;&quot;&gt; tag contains a quiz for a unit, where the &quot;name&quot; attribute is the name of 
                        the name of the button on the navigation menu.
                    </li>
                    <li>
                        &lt;section title=&quot;&quot;&gt; tag contains multiple questions for the tutorial. The &quot;title&quot; attribute
                        is displayed at the top of the each tutorial unit and quiz as a &lt;h1&gt; element.
                    </li>
                    <li>
                        &lt;question title=&quot;&quot;&gt; tag is contained within a section tag and contains a single question  
                        for the unit. The &quot;title&quot; attribute contains the text for the question, created as an &lt;h3&gt; element.
                    </li>
                    <li>
                        &lt;answer name=&quot;&quot; correct=&quot;&quot;&gt; tag is contained within a question tag, where multiple answer tags 
                        can appear within one question tag. These represent the possible answers to the question. The &quot;name&quot; attribute 
                        defines the group of radio buttons for the question. The &quot;correct&quot; attribute defines if that answer is correct 
                        or not. A &#42; inside the &quot;correct&quot; attribute denotes the correct answer
                    </li>
                </ul>
                <p class="title4">
                    The navigation menu and information work by showing and hiding specific information on the main-content div depending on 
                    what button is pressed in the aside div. Pressing a button on the navigation menu will remove the information in the 
                    main-content div, read the stored XML information (from reading the XML file once and storing the data into a variable) 
                    and displaying the appropriate information from the selected information. There is JavaScript code that is used to recursively 
                    parse the XML tags and create the appropriate HTML elements, as defined in the above XML structure. For linking the button 
                    at the bottom of the quiz to the navigation button to access the same quiz, the button is dynamically created when the data 
                    is loaded into the main-content div. If the button is pressed, the tabs in the navigation menu will change to the appropriate 
                    quiz tab that follows the chapter. Then, the JavaScript program will detect that the user is now on a quiz page and it will 
                    clear the main-content div, load the quiz information, and dynamically add a button to submit the quiz. When the submit button 
                    is pressed, the program will check the position of the answers that the user selected, compare it with the answers in the XML 
                    file, and return the results of how much the user got correct and their percent correct.
                </p>

                <hr />

                <span class="title2">Setup, Run, and Use Guide</span>
                <p class="title4">
                    The setup required for this application requires that the WelcomeToLearnTheWeb.html, LearnTheWeb.html, LearnTheWeb.js, 
                    and Units.xml files exist in the part2 folder. As well, ensure that there are .png images within the part2 folder, as they are 
                    used to display some images throughout the tutorial. To run the program, simply access the WelcomeToLearnTheWeb.html file directly 
                    or through the network of web applications. Proceed into the application and read the material in each unit. When the user 
                    has read the information, they can choose to take the quiz at the bottom of the unit, or move on and access the quiz at anytime 
                    on the side navigation menu or at the bottom of the quiz. In the quiz, answer each question and press submit to see the final score.
                </p>
            </div>
            <div class="titleDiv" hidden>
                <span class="title1">Photo Slideshow Documentation</span>
                <span class="title2">Original Description and Requirements (Part 3 - 15 marks)</span>
                <p class="title4">
                    For this project, you are required to create a slideshow web application using HTML5 
                    canvas and other web technologies you have learned so far. The requirements are as follows:
                </p>
                <ol class="title4">
                    <li>The slideshow should be drawn on the canvas;</li>
                    <li>There should be a caption for each image in the show;</li>
                    <li>There should be a button to start/stop the show;</li>
                    <li>There should be a control to toggle the show between random and sequential;</li>
                    <li>
                        There should be buttons to manually turn the show backward 
                        or forward, only if the show is in sequential mode;
                    </li>
                    <li>
                        There should be a dropdown list for users to select different 
                        transition/transformation effects for the show;
                    </li>
                    <li>
                        The data of the images should be in a JSON array so that images and 
                        their captions can be easily maintained;
                    </li>
                    <li>
                        To avoid copyright issues, you should use the images/photos you took. 
                        If you don't have the images ready, please go around the place you live 
                        or work and take some good ones;
                    </li>
                    <li>The show should have at least 20 nice pictures.</li>
                </ol>
                <p class="title4">
                    Save Part 3 files in the directory TMA1/part3.
                </p>

                <hr />
                
                <span class="title2">Interpretation of Description and Requirements</span>
                <p class="title4">
                    My interpretation of hte Photo Slideshow web application is that pictures will be displayed 
                    on a canvas, along with an associated caption for the image. There are multiple buttons used 
                    to control the display of the images. One button can start and stop the slideshow, another 
                    button can make the images display sequentially or randomly, another button can change the 
                    order that the images are displayed (only available in sequential mode, so in random mode the 
                    button should not be usable). Next, there should be a dropdown menu for different effects, or 
                    different way for the images to be displayed, where there should be at least one effect, but 
                    be open to easily add more effects. Finally use my own images for the slideshow and have at 
                    least 20 images. The data of the images and captions being stored in a JSON array for ease of 
                    maintainability can be understood as  the data for the images being the URL or relative path 
                    to the image and the caption as a string accomodating the image.
                </p>

                <hr />

                <span class="title2">Analysis and Design of the Web Application</span>
                <p class="title4">
                    The web application should contain three buttons, a dropdown menu, a canvas, and a label.
                    The three buttons are for start/stop, random/sequential, and forward/backward respectively.
                    The dropdown menu should contain some effects that affect how the canvas displays the images, 
                    such as images floating down to the canvas, or fading into the canvas. These buttons and dropdown 
                    menu will be at the top of the application (under the navigation bar at the top of the web page) 
                    and the canvas will exist below these UI elements. Under the canvas, the caption will be displayed 
                    as a label element. If there are no effects selected from the dropdown menu, 
                    then the images should just change normally. As well, it is assumed that there is some time delay 
                    between images changing.
                </p>

                <hr />

                <span class="title2">Documentation of Implementation</span>                
                <p class="title4">
                    The list of image sources and captions were contained in a lists, one for the image sources and 
                    one for the captions. These lists correspond with eachother through position, so for example, the 
                    first image source in the image sources list matches with the first caption in the image captions 
                    list. The images are initially preloaded into the 
                    application on the application's start up so the images are all loaded and ready to display when the 
                    slideshow starts. This is done through the preloadImages function and the loadImages function, where 
                    there is a callback method to set the global list of images list to the loaded list of images. The 
                    buttons, and dropdown menu are defined in HTML in the photoSlideshow.html file, with initial values 
                    of Start, Sequential, and Forward for the buttons, and a dropdown list labeled Transitions, with 
                    No Animation as the initial value. The canvas starts blank, along with the label under the canvas. 
                    The canvas's size is initialized in the initCanvas function to a size that scales with the users screen. 
                    In the javascript code, the buttons and dropdown menu have their event listeners defined in the 
                    initListeners function. A changeButtonValue is used to change the buttons text. Now, images need to 
                    be displayed on the canvas. To ensure that the image fits in the canvas and has relatively good quality, 
                    progressive sizing is used to progressively shrink the size of the image until it fits the canvas. 
                    This is done in the scaleImage function, and images are displayed on the canvas using the 
                    displayImageOnCanvas function, which also takes into account the animation. For the animations, there 
                    is a dictionary that links the animation name in the transitions dropdown menu with the appropriate 
                    animation function. The names for the buttons also exist in a buttons dictionary, as key/value pairs, 
                    so if a button is pressed, the dictionary can be searched for the new value it should be. This works 
                    both ways (ex. from Sequential to Random and from Random to Sequential). For the start and stop of the 
                    images, if the button's value is start, then an interval is started to change images every 2 seconds. 
                    If stop is the value, then the interval is cleared. The photos that is chosen to be displayed is in the 
                    switchPhoto function, which depends on the state of the random/sequential button and forward/backward 
                    button. If the mode is set to random, then a random picture is selected from the list. Otherwise, 
                    sequential is the mode, and if the mode if forward, then the images list is iterated from the current 
                    image forward, and loops to the first image once the end is hit. The same occurs on backwards. If 
                    random is selected as a mode, then the forward/backwards button is disabled in the 
                    forwardBackwardAvailability function. There is also a current transition that holds the current 
                    transition effect from the selected list. This changes through the changeTransition function. For 
                    no animation, the noAnimationTransition function is called, which just clears and draws the image on 
                    the canvas. For a floating down transition, the floatDownTransition method is called, where it draws 
                    and clears the image while moving it down the y-axis on the canvas. For the fade in transition, the 
                    fadeInTransition method is called which cahnges slowly changes the alpha value of the image before 
                    displaying it. To animate these effects, the requestAnimationFrame function is called as a callback 
                    function to control the recurrsive calls of the code and display a smooth transition.
                </p>

                <hr />

                <span class="title2">Setup, Run, and Use Guide</span>
                <p class="title4">
                    The setup for this application requires that the photoSlideshow.html and photoSlideshow.js  
                    files exist in the part3 folder. As well, ensure that there are .png images within the part3 folder, as they are 
                    the images that will be displayed on the canvas. To run the program, simply access the photoSlideshow.html file directly 
                    or through the network of web applications. The slideshow can be started anytime by pressing the start 
                    button and stopped anytime by pressing the stop button. The images can be changed from sequential to 
                    random by pressing the sequential button to change it to random, and vice-versa. In sequential image 
                    display, the forward/backward button will be available. The direction of images displayed can be changed 
                    by toggling this button. The transitions in the slideshow can be changed by selecting a transition in the 
                    transitions dropdown menu. This is done by hovering over the transitions button and selecting one of the 
                    animations.
                </p>

                <hr />

                <span class="title2">Resources</span>
                <p class="title4">
                    Some of the resources used are not documented here (due to being unable to find them anymore), but the ones 
                    that were found are listed below:
                </p>
                <ul class="title4">
                    <li>
                        <a href="http://www.javascriptkit.com/javatutors/requestanimationframe.shtml">
                            Request Animation Documentation
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/4908378/javascript-array-of-functions">
                            Calling Methods from a Function
                        </a>
                    </li>
                    <li>
                        <a href="https://www.w3schools.com/html/html5_canvas.asp">
                            HTML Canvases
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/18761404/how-to-scale-images-on-a-html5-canvas-with-better-interpolation">
                            Progressive Sizing
                        </a>
                    </li>
                    <li>
                        <a href="https://stackoverflow.com/questions/3646036/javascript-preloading-images">
                            Preloading images
                        </a>
                    </li>
                </ul>
            </div>
            <div class="titleDiv" hidden>
                <span class="title1">Utility Tools Documentation</span>
                <span class="title2">Original Description and Requirements (Part 4 - 30 marks)</span>
                <p class="title4">
                    For this project, you are required to develop a web application that can 
                    provide users with the following utility tools:
                </p>
                <ul>
                    <li>
                        <b>(10 marks)</b> Measurement converter: weight, length, area and volume
                    </li>
                    <li>
                        <b>(10 marks)</b> Mortgage Calculator
                    </li>
                    <li>
                        <b>(10 marks)</b> A utility tool that you think could be useful. 
                        You may need to do some research on the Web to build this last tool.
                    </li>
                </ul>
                <p class="title4">
                    In order to get full marks for the above design and implementation, the following are required:
                </p>
                <ol class="title4">
                    <li>
                        It must have an integrated and user-friendly interface for users to access each 
                        of the tools you designed.
                    </li>
                    <li>
                        You need to use JavaScript functions and built-in objects to implement the application.    
                    </li>
                    <li>
                        <b>At any time only one tool will be shown, to ensure a clean and 
                            tidy space for users to work with.</b>
                    </li>
                    <li>
                        <b>You need to use Ajax technologies to eliminate whole page update when 
                            switching from one utility to another.</b>
                    </li>
                    <li>
                        <b>You need to use event handler to calculate and show the result as soon as 
                            the user has given enough input to the system.</b>
                    </li>
                    <li>
                        In the assignment report, you need to provide sufficient documentation for your work, 
                        including algorithms and formulas used for the tools. If you have used any resources, 
                        including documents on the Web, you must clearly identify the source in your documentation.
                    </li>
                </ol>
                <p class="title4">
                    Save Part 4 files in the directory TMA1/part4.
                </p>

                <hr />
                
                <span class="title2">Interpretation of Description and Requirements</span>
                <p class="title4">
                    My interpretation of the Utility Tools Web Application was that the applicaiton would consist 
                    of three tools to be used, which is a unit converter for weight, length, are, and volume. The 
                    number of conversions possible are not specified, but the structure should be good enough to 
                    allow more units to be added easily. As well, I imagine the unit converter to be similar to the 
                    converter that is available by Google. The mortgage calculator is a simple calculator that  
                    provides the monthly payment rate if the correctly specified variables are inputted. It is 
                    assumed that the mortgage wanted is the monthly payment, and that it can be calculated using 
                    principal amount, monthly interest rate, and number of payments. The final tool is a tool that 
                    could potentially be useful, which will be a color generator. The color generator can be useful 
                    in helping to decide a color for themes when it becomes difficult to find or think of one on 
                    your own. The application also asked for a user-friendly 
                    interface, and that only one tool should be shown at one time. This seems similar to how the 
                    LearnTheWeb application was built and works, where only one unit is shown at a time and the 
                    user can easily switch between units. This can be applied here, where one tool is shown at a 
                    time and the user can easily switch between tools. It is assumed that the "built-in objects" are 
                    objects in JavaScript or HTML element objects that can be created through the use of JavaScript. 
                    Ajax technology is used to eliminate whole page updates. As well, event handlers can be used to 
                    show calculations once the user has inputted enough information.
                </p>

                <hr />

                <span class="title2">Analysis and Design of the Web Application</span>
                <p class="title4">
                    The analysis of this web application was to create a small network of tools. The first tool is 
                    create a unit converter which replicates something similar to Google's unit converter. There 
                    should be two input boxes, one for each of the units that will be converted between. There should 
                    be drop boxes for each of the inputs to specify which inputs have which units for proper conversion. 
                    As well, there should be another drop box for determining which categories of units to choose from.
                    For the mortgage calculator, there should be inputs and labels associated with the inputs to tell 
                    what the input is. There should also be text that displays the mortgage (or monthly payment amount) 
                    which updates once all of the inputs are filled in. The inputs should be of type number, to ensure 
                    that only numbers are inputted, and the mortgage amount should only be displayed if all of the inputs 
                    are proper numbers. For the color generator, there will be a button that will generate the random color. 
                    A div will update to display the color, and an associated label will display the color code in hexadecimal.
                </p>

                <hr />

                <span class="title2">Documentation of Implementation</span>                
                <p class="title4">
                    For each of the utility tools, an XML file is used to create the HTML elements. Starting with the 
                    unit converter tool, the XML contains information for creating two inputs and three dropdown lists. The 
                    options for the two dropdown menus with different units have base values in an attribute called baseVal, which 
                    are the value relative to the option with a base value of one for the respective type. The type of the unit is 
                    specified in the second attribute parameter called type, which correlates with the options in the third 
                    dropdown list that contains different types of unit conversions. To add another unit type of unit, add the 
                    unit to the third select menu, then add the appropriate units under the other two select dropdown menus with 
                    the appropriate base value and type that matches the unit. For the UI, the inputs and select dropdown lists are 
                    created in the displayInformation function, which is called when the tab is switched to. The function 
                    recursively creates the XML elements and assigns the appropriate classes and event listeners. Each input has an 
                    dropdown menu associated with it, grouped together by having the same group className (ex. group1 for the first 
                    input and dropdown list). The dropdown lists are then populated based on the type of unit conversion in the 
                    third dropdown menu. The lists are populated with the options in the XML file. When the user inputs an input into 
                    one of the dropdown menu, an event handler will use the base units from the two dropdown menus and convert the 
                    opposing input value to the converted value. Two global variables (called group1 and group2) correspond with the 
                    input and dropdown menu groups, and these variables are updated when any changes occur to the inputted values or 
                    the units are changed. When the type of unit conversion dropdown list is changed, the two dropdown lists are updated 
                    to have the appropriate units for the selected type. When either of the two dropdown lists have their units changed, 
                    only the right input value (group2 input) will update to reflect the change. The left input value (group1) will 
                    remain (this is similar to Google's unit converter).
                </p>
                <p class="title4">
                    For the mortgage calculator, the XML data is structured differently, as they represent the actual HTML elements. 
                    Thus, there is an h1 element for the header, a label, input, and break associated with each of the inputs 
                    (principal, monthly interest rate, and number of payments). The inputs have id's so they can be referenced in the 
                    JavaScript code, and they are of type &quot;number&quot; with steps of &quot;any&quot;. Setting the steps to any is 
                    important, otherwise decimal values cannot be inputted into the textbox as valid inputs. Finally, there is one more 
                    label that is the mortgageLabel, which will update when all of the inputs are valid. The program will generate the 
                    HTML elements by using the innerHTML value from the XML data and setting that to the div's innerHTML, thus producing 
                    the appropriate HTML elements. Afterwards, each input is given an event listener to calculate the mortgage. Each of the 
                    inputs are passed into the calculateMortgage function (which is called by the event listener for an input into the input 
                    elements), which uses the arguements property to retrieve a variable number of inputs. Each of these inputs are checked 
                    to be numbers (not NaN values or NaN values after converting to floats), where an invalid input will keep the mortgageLabel 
                    text from updating to show a mortgageg amount. If each of the inputs have a valid input, then the values are retrieved and 
                    applied into the mortage calculation formula (more information about the formula can be found in the resources section). 
                    The mortgageLabel text is then updated to show the mortgage amount. If the mortgage amount is too large to display, then 
                    a note is displayed (otherwise NaN is displayed). This can be caused from an overflow with the Number of Payments input, 
                    since it is used as an exponential value.
                </p>
                <p class="title4">
                    For the random color generator, the XML data is structured similarily to the mortgage calculator, where it also defines 
                    the exact HTML elements that will be rendered in the browswer. This includes a h1 element for the header title, a button to 
                    generate the random color, a div to display the color, and a label to display the color code. The code uses the same method 
                    of using the XML data's innerHTML property and set that div container's innerHTML to that value. Afterwards, the label is 
                    moved outside of thediv that's created from the XML data, into the containing div. Afterards, an array for all hexadecimal 
                    values are created. An event handler is added to the button to where there is an initial string called colorInHex containing 
                    &quot;#&quot;, which is the start of a color code. Next, a for loop runs for 6 iterations, randomly generating a number 
                    between 0 and 15 and selects a number of letter from the possible hexadecimal values. This value is appended onto the colorInHex 
                    string to build the random color. After the loop finishes, the background color of the div is set to the color string, and the 
                    colorLabel text value is updated to the colorString value.
                </p>
                <hr />

                <span class="title2">Setup, Run, and Use Guide</span>
                <p class="title4">
                    The setup for this application requires that the UtilityTools.html, UtilityTools.js, and part4.xml files exist in  
                    the part3 folder. To run the program, simply access the UtilityTools.html file directly or through the network of 
                    web applications. The unit converting tool is used by inputting values into one input box, with the appropriately 
                    selected units and the converted value in the second input box will appear. Conversions can be done in both 
                    directions by changing inputting values into different input boxes. Different units can be selected from the 
                    dropdown list underneath the inputs, and different types of units can be selected from the large dropdown menu. The 
                    mortgage calculator can be used by inputting the appropriate values required to calculate a mortgage amount and the 
                    value will be dynamically changed upon any inputs. The random color generator tool can be used by simply pressing the 
                    &quot;Generate a Color!&quot; button. The div below the button will update with the randomly generated color and the 
                    color code can be found below the div.
                    Each tool can be accessed through the buttons in the navigation menu on the left side of the screen. 
                </p>

                <hr />

                <span class="title2">Resources</span>
                <p class="title4">
                    Some of the resources used are not documented here (due to being unable to find them anymore), but the ones 
                    that were found are listed below:
                </p>
                <ul class="title4">
                    <li>
                        <a href="https://www.wikihow.com/Calculate-Mortgage-Payments">
                            Formula for Calculating Mortgage (Method 2)
                        </a>
                    </li>
                    <li>
                        <a href="https://www.w3schools.com/jsref/jsref_random.asp">
                            JavaScript Random Function
                        </a>
                    </li>
                    <li>
                        <a href="http://www.color-hex.com/">
                            Color Codes and How They Work
                        </a>
                    </li>
                </ul>
            </div>
            <div class="titleDiv" hidden>
                <span class="title2">About the XML Parsing Code</span>
                <p class="title4">
                    The XML parsing in the Learn The Web Web Application, Photo Slideshow Web Application, and Unit Converter tool in 
                    the Utility Tools web application is a bit messy, but it performs the job correctly. After closer inspection 
                    of the properties in the responseXML data, I noticed that the innerHTML elements match the can be created by simply 
                    setting the innerHTML of the div container to the same innerHTML of the XML response. This would have simplified the 
                    code greatly if I had figured this out earlier, but it was a great learning experience and helped in understanding 
                    how XML data is passed from an XML file into JavaScript.
                </p>
                <hr />
                <span class="title2">XMLHttpRequests and Working Browsers</span>
                <p class="title4">
                    The web application was tested on the Firefox, Chrome, Internet Explorer, and Opera web browsers. Some tools work 
                    on the Chrome, Internet Explorer, and Opera web browsers, but anything using XMLHttpRequests will not work on these 
                    browsers, and anything using XSLT will not work on Chrome and Opera. All functionalities work on Firefox, so it is 
                    recommended to use Firefox to get the proper functionality.
                </p>
                <hr />                
                <span class="title2">Photo Slideshow Utility Tool</span>
                <p class="title4">
                    The photos may appear as different sizes. This is because the images were taken with different cameras and with 
                    different orientations (landscape and portrait) which may scale differently when being placed on the canvas. This 
                    can make the images look distorted. Also note that the initial image in the slideshow may not appear, but the text will. 
                    This is due to a problem with preloading the image.
                </p>
                <hr />
            </div>
        </div>
    </body>
</html>