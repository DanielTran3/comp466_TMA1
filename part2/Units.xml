<?xml version="1.0"?>

<units>
    <tutorial name="Unit 1" id="0">
        <section title="HTML Part 1">
            <subsection title="1.1 An Introduction to HTML Structure Elements">
                <paragraph>
                    HTML (HyperText Markup Language) is used to create elements that the user interacts with. Since HTML is a
                    Markup language, it is used to define the content and structure of the webpage. These contents act to display
                    information from a server, or to receive inputs from the user to send to a server for processing. HTML is the
                    front-end side (or Top tier) of the three-tier architecture. The three-tier architecture is used to help
                    define a separation of logic between the front-end and the back-end, where the tiers are called Top Tier
                    (or User Interface Tier or Client Tier), the Middle Tier (or Business Logic Tier), and the Bottom Tier
                    (or Data Tier or Information Tier).
                </paragraph>
                <paragraph>
                    HTML elements can appear differently depending on the browser used, as well as the browser version. Thus,
                    it is important to ensure that the elements being added into your application are compatible with a majority
                    of the web browsers. This will help ensure that everyone can use the application as it was intended and not
                    miss out on any features that you add in. To help with this, there are websites that can help compare and
                    contrast between different browsers to see which browsers can utilize which HTML elements. Some of them
                    are Html5Test.com and CanIUse.com
                </paragraph>
                <paragraph>
                    In this unit, we will be looking at a couple of page-structure elements, and in the next unit, we will look at
                    some different input types that are available in HTML5. So in this chapter, we will be looking at the
                    following page-structure elements: paragraph, table, div, a, and ul/ol/li elements.
                </paragraph>
                <paragraph>
                    A quick note in regards to HTML elements is that each element can be given an unique ID (specified by the ID attribute).
                    The id can be used to identify a specific element on a page (each ID must be different on one given page).
                    There willbe more discussion on this later on.
                </paragraph>
            </subsection>
            <subsection title="1.2 Paragraph Element">
                <paragraph>
                    In HTML, there exists a paragraph element, which can be created by using the &lt;p&gt;&lt;/p&gt; tag. Paragraphs
                    are used to display text that the programmer wants the end-user to see. It helps with defining a structure for the document.
                </paragraph>
                <paragraph>
                    Here is an example of a couple of paragraph elements displayed over eachother.
                </paragraph>
                <image src="paragraph.png">Two paragraphs, one ontop of the other saying &quot;This is a paragraph&quot; and &quot;This is another paragraph&quot; respectively</image>
                <image src="paragraph_code.png">
                    &lt;p&gt;This is a paragraph&lt;/p&gt;
                    &lt;p&gt;This is another paragraph&lt;/p&gt;
                </image>
            </subsection>
            <subsection title="1.3 Table Element">
                <paragraph>
                    A table element is very useful for formatting data output and displaying tabular data. Tables begin by using the
                    &lt;table&gt;&lt;/table&gt; tag. This will create the outer boundary that contains the table. The rows of the
                    table can be created using the &lt;tr&gt;&lt;/tr&gt; tags, which stands for "table row". Each of these tags that
                    are specified within a table element will create a new row. To create columns, the &lt;td&gt;&lt;/td&gt; tag
                    can be used. The "td" tag stands for "table data"
                </paragraph>
                <paragraph>
                    Here is an example of a table creation, with 3 rows and 4 columns
                </paragraph>
                <image src="table.png">A Table containing 3 rows and 4 columns, filled with numbers from 1 to 12.</image>
                <image src="table_code.png">
                    &lt;table&gt;
                        &lt;tr&gt;
                            &lt;td&gt;1&lt;/td&gt;
                            &lt;td&gt;2&lt;/td&gt;
                            &lt;td&gt;3&lt;/td&gt;
                            &lt;td&gt;4&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;5&lt;/td&gt;
                            &lt;td&gt;6&lt;/td&gt;
                            &lt;td&gt;7&lt;/td&gt;
                            &lt;td&gt;8&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;9&lt;/td&gt;
                            &lt;td&gt;10&lt;/td&gt;
                            &lt;td&gt;11&lt;/td&gt;
                            &lt;td&gt;12&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/table&gt;
                </image>
            </subsection>
            <subsection title="1.4 Div Element">
                <paragraph>
                    A div element can be used to separate portions of the web page. A div is block-level element, meaning it has its own
                    padding, border, and margin spacing around the div's content. A div element can contain any other html elements
                    within it.
                </paragraph>
                <paragraph>
                    Here's an example of a div element with a paragraph inside of it. The div will have a 1px padding on the left and a 10px
                    padding on the right, with a blue dotted border.
                </paragraph>
                <image src="div.png">A div with a paragraph that says "A paragraph inside a div", where the div has a 1px left padding, 10px right padding, a width of 100px, and a blue dotted border</image>
                <image src="div_code.png">
                    &lt;div style=&quot;padding-left:1px; padding-right:10px; border-style:dotted; border-color:blue; width:100px;&quot;%gt;
                        &lt;p%gt;A paragraph inside a div&lt;/p%gt;
                    &lt;/div%gt;
                </image>
            </subsection>
            <subsection title="1.5 Anchor Element">
                <paragraph>
                    The anchor element can contain a link  that will redirect the user to the specified http address. The address can be
                    specified in the href attribute of the a element. Text can be placed between the start and end tags to create a
                    hyperlinked text (generally denoted with blue text and an underline beneath the text). Clicking the link will
                    change the color of the text to purple, denoting that the site had been visited before. CSS styles can be used
                    to change these behaviours, but they will be discussed later on.
                </paragraph>
                <paragraph>
                    Here's an example of an anchor element before and after it was clicked.
                </paragraph>
                <image src="a_before.png">Anchor element with the text "Anchor Element" before it was clicked (text is blue)</image>
                <image src="a_after.png">Anchor element with the text "Anchor Element" after it was clicked (text is purple)</image>
                <image src="a_code.png">
                    &lt;a href="#"&gt;Anchor Element&lt;/a&gt;
                </image>
            </subsection>
            <subsection title="1.6 Lists">
            </subsection>
        </section>
    </tutorial>
    <tutorial name="Unit 2" id="1">
        <section title="HTML Part 2">
            <subsection title="2.1 An Introduction to HTML Input Elements">
                <paragraph>
                    Now that you have some basic information on some HTML structure elements, it's time to investigate another important realm of
                    HTML, which are the input elements. These elements allow the user to provide data to the backend for processing. Generally, a
                    majority of input elements can be seen in forms, where the user enters some sensitive data that is used to query a database.
                    An example of this would be when someone is filling out registration information to sign up on a social media platform. Most
                    likely, you will be asked to fill in your First Name, Last Name, Date of Birth, Email Address, and Password. All of these inputs
                    use the HTML input elements that will be discussed. The inputs are also defined using the &lt;input type=&quot;&quot; /&gt; tag.
                    There are other forms of inputs that are different than text inputs, such as range, color, date, email, number, search, and tel.
                    These different input forms can be created by filling in the value of the type attribute, seen inside of the input tag.
                </paragraph>
            </subsection>
            <subsection title="2.2 Range Input">
                <paragraph>
                     The input of type range creates a slider control. The slider has a max, min, step, and initial value that can be modified using the
                     element's attributes (max, min, step, and value respectively). As well, the starting location of the slider can be specified with the value attribute. 
                     A slider is self-validating, as the only viable values are the ones in the range of the specified maximum and minimum.
                </paragraph>
                <paragraph>
                    Here's an example of a range input, where the maximum value is 100, the minimum value is 12, and the starting value is 51.
                    Note that in this example, the range input is enclosed by a label to define display the maximum and minimum values.
                </paragraph>
                <image src="rangeInput.png">A slider with max value 100, min value 12, and starting value 51.</image>
                <image src="rangeInput_code.png">
                    &lt;label&gt;
                        12&lt;input type="range" max="100" min="12" value="51" /&gt;100
                    &lt;/label&gt;
                </image>
            </subsection>
            <subsection title="2.3 Color Input">
                <paragraph>
                    The input of type color allows for the user to access a color picker dialog box. The dialog box is accessible by clicking
                    the "button" that the input element creates. This "button" also shows the color that the user has chosen (default to black)
                    The color picker dialog is the standard windows dialog that shows up if you were to use somthing like Microsoft Paint.
                    After the user selects a color and presses the "OK" button, the dialog will close and the user selected color will be
                    displayed in the input element.
                </paragraph>
                <paragraph>
                    Here's an example of how to create an HTML color picker.
                </paragraph>
                <image src="color_input_before.png">The  input of type color before a color is selected (default to black)</image>
                <paragraph>
                    The above image shows the color input type before the user has specified a color
                </paragraph>
                <image src="color_input_dialog.png">The color picker dialog with the selected color as cyan</image>
                <paragraph>
                    The above image shows the color picker dialog that is displayed when the input element is pressed
                </paragraph>
                <image src="color_input_after.png">The  input of type color after a color is selected (cyan)</image>
                <paragraph>
                    The above image shows the color input type after the user has specified a color (color seen in the previous image) 
                </paragraph>
                <image src="color_input_code.png">
                    &lt;input type="color" /&gt;
                </image>
            </subsection>
            <subsection title="2.4 Date Input">
                <paragraph>
                    The input of type date creates an input textbox that allows the user to update the date values in multiple ways.
                    First, the user can directly update the date by typing into box in the respective fields (year, month, and day).
                    Another way is by clicking into a field and pressing the up and down arrows on the spinner controls.
                    The last way is by clicking an arrow next to the spinners that opens up a calendar, allowing the user to select the date
                    from there.
                </paragraph>
                <paragraph>
                    Here's an example of how to create a date input element.
                </paragraph>
                <image src="date_input_before.png">Date input with no date inputted</image>
                <paragraph>
                    The above image shows the date input no date inputted.
                </paragraph>
                <image src="date_input_after.png">Date input after the calendar is open</image>
                <paragraph>
                    The above image shows the date input element's calendar dialog
                </paragraph>
                <image src="date_input_code.png">
                    &lt;input type="date" /&gt;
                </image>
            </subsection>
            <subsection title="2.5 Email Input">
                <paragraph>
                    The input of type email creates an input text box that expects text in an email format. The input text box will verify 
                    if the input is in a correct email format when the form is submitted, but will not check if the email exists or not. it
                    is also possible for the input to accept multiple emails (separated by commas), if the multiple attribute is specified.
                </paragraph>
                <paragraph>
                    Here's an example of how to create an email input, and what it looks like if the form is to be submitted with an invalid
                    email format (or is submitted empty (the required attribute forces a value to be inputted into the input)).
                </paragraph>
                <image src="email_input_empty.png">An empty email input field</image>
                <image src="email_input_invalid.png">An invalid email being submitted</image>
                <paragraph>
                    The above image shows an invalid popup message when an invalid email is trying to be submitted.
                </paragraph>
                <image src="email_input_code.png">
                    &lt;input type="email" multiple required/&gt;
                </image>
            </subsection>
            <subsection title="2.6 Number Input">
            </subsection>
            <subsection title="2.7 Search Input">
            </subsection>
            <subsection title="2.8 Tel Input">
            </subsection>
        </section>
    </tutorial>
    <tutorial name="Unit 3" id="2">
        <section title="CSS">
            <subsection title="3.1 What is CSS?">
                <paragraph>
                    CSS (Cascading Style-sheet) is a stle sheet language used to style HTML elements. CSS helps in creating aesthetically pleasing
                    web pages by allowing the developer to color structural elements, input elements, and just about anything else HTML related. It also
                    helps to layout the web application, as it can specify the sizes of of HTML elements. In turn, this means that CSS also helps
                    with the scalability of web applications on smaller and larger devices (such as scaling down from a desktop browser on a large screen,
                    to a mobile browser on a cellular device. Thus, it is obvious that CSS is an important aspect of web development.
                </paragraph>
            </subsection>
            <subsection title="3.2 Inline CSS vs. an External Stylesheet">
                <paragraph>
                    There are two ways to modify HTML elements using CSS. The first way is through the use of inline css in the HTML elements.
                    This is where the CSS styles are applied directly to the HTML element (the HTML style attributes are modified directly in the
                    creation of the HTML element). An example of what this would look like on a div element would be:
                </paragraph>
                <image src="css_3-2.png">A div with a blue background</image>
                <image src="css_3-2_code.png">
                    &lt;div style="width:200px; height:200px; background-color:blue;"&gt;&lt;/div&gt;
                </image>
                <paragraph>
                    As shown here, there is an attribute in the HTML div starting tag called style, and when that attribute is in place, CSS code
                    can be written to directly modify this element.
                </paragraph>
                <paragraph>
                    Using inline HTML may not be of best practice, as it can cause a lot of duplicated code (if multiple elements want to be styled
                    the same way), leading to a lack in maintainability and consistancy. What I mean by maintainability and consistancy is, is if there
                    are multiple webpages in which the same theme needs to be applied to all of the pages, then it becomes a tedious and
                    inefficient to style each and every element with the same styles.
                </paragraph>
                <paragraph>
                    A more reasonable approach would be to use an external CSS stylesheet, which can be used to create a common style for certain
                    elements or certain groups of elements. This can be done in one of two ways. In the first method, a "style" element
                    (&lt;style&gt;&lt;CSS description here&gt;&lt;/style&gt;) can be declared inside the HTML document that will allow for CSS styling
                    for a specific HTML file. This solution is better than the inline CSS, but still not the best, since the CSS code would need to
                    be duplicated in other HTML files as well. The best way is to use a separate CSS file (of type .css), where the stylesheet can be
                    referenced in each HTML file (using &lt;link rel="stylesheet" type="text/css" href="yourstylesheet.css" /&gt;). Discussing some of
                    the attributes in the link tag, rel describes the relationship between the current document and the linked document, type defines 
                    the MIME type as a text with CSS formatting, and the href is the direct reference to the stylesheet. Thus, any HTML files that have 
                    the reference can use the CSS rule-set specified in the CSS file.
                </paragraph>
            </subsection>
            <subsection title="3.3 Using External CSS Stylesheets">
                <paragraph>
                    First, let's begin be defining a CSS rule-set for an HTML element. As stated in the previous unit, HTML elements can be given unique IDs. 
                    In CSS, styles can be applied directly to an HTML element with a specific ID. For example, if there is an element declared as
                    &lt;div id="myDiv"&gt;&lt;/div&gt; and we wanted to set the background color to red, it can be done in the CSS stylesheet as
                    #myDiv { background-color:red; }. Notice how the div's ID was preceded by a '#'. The # symbol specifies that the CSS properties will be
                    applied to an elements with that specific ID. Now let's say we wanted to apply the CSS properties to multiple HTML elements. A rule-set 
                    can be made similarly to how the rule-set was made for an ID, but replacing the '#' with a '.' (so using the above example, it would look like
                    .myDiv { background-color:red; }). This rule-set can be applied to any HTML element by using the class attribute (so in the above div, it would
                    be &lt;div class="myDiv"&gt;&lt;/div&gt;). Multiple CSS classes can be applied to an element. If you want CSS rule-sets to be applied to a
                    certain HTML elements (such as applying the CSS rule-set to all div elements), then specify the HTML element name with nothing preceding it
                    (so once again, for a div element it would look like div { background-color:red; } to apply a red background to all div's).
                </paragraph>
            </subsection>
        </section>
    </tutorial>
    <tutorial name="Unit 4" id="3">
        <section title="JavaScript, AJAX, and XML">
            <subsection title="4.1 What is JavaScript?">
                <paragraph>
                    JavaScript is a client-side scripting language that can be used to perform tasks to save time and data transfer between the server
                    and the client. For example, if there is a simple calculation, such as adding two inputs from the user, then it may be redundant
                    to have to send that data back to a server so it can return the result of such a simple calculation back. Just keep in mind that if
                    you are using JavaScript, do not store any sensitive data in JavaScript because anyone who has access to the website can use a console
                    viewer and view any of the data stored. JavaScript helps in making HTML more interactive, since it can create actions, effects, transitions,
                    etc when events occurs on an HTML element or page (such as clicking a button, typing into an input, etc.)
                </paragraph>
                <paragraph>
                    JavaScript can be used in similar ways as CSS can. Some JavaScript functions can be called for an event in an inline HTML element
                    (For example, &lt;button type="submit" onclick="javascriptFunction()"&gt;&lt;/button&gt; would create a button that would call the functions
                    "javascriptFunction" when it is clicked). For similar reasons as with CSS, it is not recommended to call JavaScript functions in this
                    manner, as it makes maintainability and scalability more difficult. JavaScript can be declared inside an HTML file by using the
                    &lt;script&gt;"...JavaScript Here"&lt;/script&gt;. The JavaScript decan be defined between the two script tags. As well, JavaScript can
                    be defined outside of an HTML file, as its own external JavaScript file (ending with .js). The JavaScript can be included into any
                    HTML file by using the same script tag, but with a src attribute that points to the location of the JavaScript file (ex.
                    &lt;script src="myJavascriptFile.js"&gt;&lt;/script&gt;).
                </paragraph>
            </subsection>
            <subsection title="4.2 Brief Introduction to AJAX">
                <paragraph>
                    In the discussions so far about web pages, the current way of communicating with a server is by using a form and refreshing the page
                    in order to send and receive data between the server. This approach is fine, unless 
                </paragraph>
            </subsection>
        </section>
    </tutorial>
</units>